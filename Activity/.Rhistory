data(nycair)
data("nycflights")
a <- mutate(nycflights, if(dep_delay >0, "delayed", "ontime"))
a <- mutate(nycflights, ifelse(dep_delay >0, "delayed", "ontime"))
a
names(a)
remove(a)
data("nycflights")
feb <- nycflights[nycflights$month == 2,]
febSfo <- feb[feb$dest =="SF0",0]
febSfo <- feb[feb$dest == "SF0",]
febSfo
remove(febSfo)
feb
dim(feb$dest == "SFo")
dim(feb$dest == "SFO")
febSfo <- feb[feb$dest == "SFO",]
hist(febSfo$arr_delay)
which.max(febSfo$arr_delay)
summary(febSfo$arr_delay)
boxplot(febSfo$arr_delay)
aggregate(febSfo$dep_delay,nycair$carrier, median)
aggregate(febSfo$dep_delay,febSfo$carrier, median)
aggregate(febSfo$dep_delay,list(febSfo$carrier), median)
names(febSfo)
aggregate(febSfo$dep_delay,list(febSfo$carrier), IQR)
aggregate(nycflights$dep_delay,list(nycflights$month), mean)
aggregate(nycflights$dep_delay,list(nycflights$month), median)
plot(nycflights$month, nycflights$arr_delay)
aggregate(nycflights$arr_delay,list(nycflights$month), mode)
aggregate(nycflights$arr_delay,list(nycflights$month), max)
hist(nycflights$arr_delay)
aggregate(nycflights$arr_delay,list(nycflights$month), median)
aggregate(nycflights$arr_delay,list(nycflights$month), mean)
aggregate(nycflights$dep_delay > 0,count)
nycflights$dep_type <- ifelse(nycflights$dep_delay > 0, "delayed", "ontime")
nycflights
str(nycflights$dep_time)
nycflights$dep_type
nycflights$arr_type <- ifelse(nycflights$arr_delay > 0, "delayed", "ontime")
nycflights$arr_type
names(nycflights)
summary(nycflights$origin)
aggregate(nycflights$dep_type,list(nycflights$origin), sum)
aggregate(nycflights$dep_type == "ontime",list(nycflights$origin), sum)
aggregate(nycflights$dep_type == "delayed",list(nycflights$origin), sum)
6460/(6460+5311)
6739/(6739+4158)
6737/(6737+3330)
nycflights$avg_speed <- nycflights$distance*60/nycflights$air_time
nycflights
nycflights[which.max(nycflights$avg_speed),]
nycflights[nycflights$dep_type =="delayed",]
df <- nycflights[nycflights$dep_type =="delayed",]
do <- df[df$arr_type =="ontime",]
3508/12799
nycflight$iqr <- IQR(nycflights$arr_delay)
nycflights$iqr <- IQR(nycflights$arr_delay)
nycflights[which.max(nycflights$iqr)]
nycflights[which.max(nycflights$iqr),]
nycflights[which.max(nycflights$iqr),]
aggregate(nycflights$dep_delay,list(nycflights$origin), median)
aggregate(nycflights$dep_delay,list(nycflights$month), median)
names(nycflights)
nycflights[nycflights$origin == "NYC",]
nycflights[(nycflights$origin == "NYC"),]
a <- nycflights[(nycflights$origin == "NYC"),]
a
remove(1)
remove(a)
nycflights$median <- aggregate(nycflights$dep_delay, nycflights$month, median())
nycflights$median <- aggregate(nycflights$dep_delay, nycflights$month, median
)
aggregate(nycflights$dep_delay, list(nycflights$month), median)
nycflights[nycflights$origin == "NYC", ]
nycflights$origin
plot(nycflights$month, nycflights$dep_delay)
boxplot.matrix(nycflights$dep_delay, use.cols = nycflights$month)
?boxplot.matrix
boxplot.matrix(nycflights$dep_delay, use.cols = nycflights$month, col = 1:12)
boxplot.matrix(nycflights$dep_delay,nycflights$month)
boxplot.matrix(nycflights$dep_delay~nycflights$month,outline = FALSE)
boxplot.matrix(nycflights$dep_delay~reorder(nycflights$month),outline = FALSE)
bwplot(nycflights$dep_delay|nycflights$month)
library(lattice)
bwplot(nycflights$dep_delay|nycflights$month)
bwplot(values ~ dep_delay|month, nycflights)
bwplot(dep_delay|month, nycflights)
bwplot(values~dep_delay|month, nycflights)
febSfo
aggregate(febSfo$arr_delay, list(febSfo$month), IQR)
aggregate(febSfo$arr_delay, list(febSfo$carrier), IQR)
install.packages("knitr")
install.packages("markdown")
install.packages("slidify")
install.packages("slidify")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turin/2/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
# Finally, let's run a demo to see H2O at work.
demo(h2o.kmeans)
install.packages("shiny")
q()
# Chunk 1: setup
#removes all variables from environment
rm(list=ls(all=TRUE))
# Chunk 2: Check & Create WD
ifelse(!dir.exists(file.path("~/", "Activity")), dir.create(file.path("~/", "Activity")), FALSE)
setwd("~/Activity")
# Chunk 3: Libraries
library(reshape2)
library(data.table)
library(ggplot2)
library(lattice)
# Chunk 4: File Name
filename <- "repdata_data_activity.zip"
# Chunk 5: Downloading & Unzipping the dataset
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("Acitivity Monitoring Dataset")) {
unzip(filename)
}
# Chunk 6: Rading CSV Data
activityData <- read.csv('activity.csv', header = T)
names(activityData)
str(activityData)
head(activityData)
dim(activityData)
# Chunk 7: hist and summary
act_tbl = data.table(activityData)
act_tbl_summary = act_tbl[, list(total_steps = sum(steps, na.rm = T)),
by = date]
# Chunk 8: hist function
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
jpeg(file = "~/Activity/myplot.jpg")
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
dev.off()
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
# Chunk 9: data summarization
#summarize dataset by interval
act_tbl_summary_intv = act_tbl[, list(avg_steps = mean(steps, na.rm = T)),
by = interval]
#plotting the time series
with(act_tbl_summary_intv, {
plot(interval, avg_steps, type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps')
})
#Finding interval that has maximum average steps
max_avg_steps = act_tbl_summary_intv[which.max(avg_steps), ]
#Generating Labels
max_lab = paste('Maximum Of ', round(max_avg_steps$avg_steps, 1), ' Steps \n On ', max_avg_steps$interval, 'th Time Interval', sep = '')
#Collecting cooridinates of the max interval for charting
points(max_avg_steps$interval,  max_avg_steps$avg_steps, col = 'red', lwd = 3, pch = 19)
#Add Label To Annotate Maximum # Steps And Interval
legend("topright",
legend = max_lab,
text.col = 'red',
bty = 'n'
)
# Chunk 10: Missing Value
sum(is.na(act_tbl$steps))
# Chunk 11: Data cleaning
#Joining the dataframe created earlier to summarizes the average number of steps per interval to the original dataset
setkey(act_tbl, interval)
setkey(act_tbl_summary_intv, interval)
#Desiging a fucnction return the second value if the first value is NA
NA_Subs = function(x,y){
if(is.na(x)){
return(y)
}
return(x)
}
#Designing dataset that replaces NAs with average values
act_tbl_clean = act_tbl[act_tbl_summary_intv]
act_tbl_clean$new_steps = mapply(NA_Subs,act_tbl_clean$steps, act_tbl_clean$avg_steps)
#summaryize new dataset by day
act_tbl_summary_clean = act_tbl_clean[, list(new_steps = sum(new_steps, na.rm = T)), by = date]
#preview of new dataset
head(act_tbl_summary_clean)
# Chunk 12: Missing Values Modification
par(mfrow = c(1,2))
des_hist(act_tbl_summary$total_steps, 'Missing Values Removed')
des_hist(act_tbl_summary_clean$new_steps, 'Missing Values Replaced With \n Mean For Interval')
# Chunk 13: New Factor Design
#Making function to return "Weekday" or "Weekend"
weekpart = function(x){
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
#Adding name of the week
act_tbl_clean$dayname = weekdays(as.Date(act_tbl_clean$date))
#Adding factor variable to differentiate between weekday & weekend
act_tbl_clean$daytype = as.factor(apply(as.matrix(act_tbl_clean$dayname), 1, weekpart))
#Summarizing Dataset: Mean grouped by interval and daytype
act_tbl_summary_clean = act_tbl_clean[, list(avg_steps = mean(new_steps, na.rm = T)), by = list(interval, daytype)]
#inspecting designed dataset in output
str(act_tbl_summary_clean)
# Chunk 14: Panel Plot
xyplot(avg_steps~interval | daytype, data = act_tbl_summary_clean,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
jpeg(file = "~/Activity/myplot.jpg")
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
dev.off()
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
jpeg(file = "~/Activity/myplot.jpg")
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
dev.off()
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
jpeg(file = "~/Activity/myplot.jpg")
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
# Designing a histogram plot function which can be resused later
jpeg(file = "~/Activity/myplot.jpg")
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
# Designing a histogram plot function which can be resused later
jpeg(file = "~/Activity/myplot.jpg")
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
# Designing a histogram plot function which can be resused later
jpeg(file = "~/Activity/myplot.jpg")
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
#summarize dataset by interval
act_tbl_summary_intv = act_tbl[, list(avg_steps = mean(steps, na.rm = T)),
by = interval]
jpeg(file = "~/Activity/myplot2.jpg")
#plotting the time series
with(act_tbl_summary_intv, {
plot(interval, avg_steps, type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps')
})
#Finding interval that has maximum average steps
max_avg_steps = act_tbl_summary_intv[which.max(avg_steps), ]
#Generating Labels
max_lab = paste('Maximum Of ', round(max_avg_steps$avg_steps, 1), ' Steps \n On ', max_avg_steps$interval, 'th Time Interval', sep = '')
#Collecting cooridinates of the max interval for charting
points(max_avg_steps$interval,  max_avg_steps$avg_steps, col = 'red', lwd = 3, pch = 19)
#Add Label To Annotate Maximum # Steps And Interval
legend("topright",
legend = max_lab,
text.col = 'red',
bty = 'n'
)
dev.off()
jpeg(file = "~/Activity/myplot3.jpg")
xyplot(avg_steps~interval | daytype, data = act_tbl_summary_clean,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
dev.off()
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
jpeg(file = "~/Activity/Figures/myplot1.jpg")
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
par(mfrow = c(1,2))
des_hist(act_tbl_summary$total_steps, 'Missing Values Removed')
des_hist(act_tbl_summary_clean$new_steps, 'Missing Values Replaced With \n Mean For Interval')
jpeg(file = "~/Activity/Figures/myplot3.jpg")
# Designing a histogram plot function which can be resused later
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
## to output the graph on a files please uncomment following code
jpeg(file = "~/Activity/Figures/myplot1.jpg")
dev.off()
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
dev.off()
# Designing a histogram plot function which can be resused later
## to output the graph on a files please uncomment following code
jpeg(file = "~/Activity/Figures/myplot1.jpg")
des_hist = function(x, title){
hist(x,
breaks = 20,
main = title,
xlab = 'Total Number of Steps', col = 'grey',
cex.main = .9)
#calculating mean and median
mean_value = round(mean(x), 1)
median_value = round(median(x), 1)
#drawing lines for mean and median on histogram
abline(v=mean_value, lwd = 3, col = 'blue')
abline(v=median_value, lwd = 3, col = 'red')
#Displaying legend
legend('topright', lty = 1, lwd = 3, col = c("blue", "red"),
cex = .8,
legend = c(paste('Mean: ', mean_value),
paste('Median: ', median_value))
)
}
des_hist(act_tbl_summary$total_steps, 'Number of Steps Taken Per Day')
## After output in Jpeg fromat closing the device
dev.off()
#summarize dataset by interval
act_tbl_summary_intv = act_tbl[, list(avg_steps = mean(steps, na.rm = T)),
by = interval]
## to output the graph on a files please uncomment following code
jpeg(file = "~/Activity/Figures/myplot2.jpg")
#plotting the time series
with(act_tbl_summary_intv, {
plot(interval, avg_steps, type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps')
})
#Finding interval that has maximum average steps
max_avg_steps = act_tbl_summary_intv[which.max(avg_steps), ]
#Generating Labels
max_lab = paste('Maximum Of ', round(max_avg_steps$avg_steps, 1), ' Steps \n On ', max_avg_steps$interval, 'th Time Interval', sep = '')
#Collecting cooridinates of the max interval for charting
points(max_avg_steps$interval,  max_avg_steps$avg_steps, col = 'red', lwd = 3, pch = 19)
#Add Label To Annotate Maximum # Steps And Interval
legend("topright",
legend = max_lab,
text.col = 'red',
bty = 'n'
)
## After output in Jpeg fromat closing the device
dev.off()
